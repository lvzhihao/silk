// Code generated by protoc-gen-go. DO NOT EDIT.
// source: accounts.proto

/*
Package silk_core is a generated protocol buffer package.

It is generated from these files:
	accounts.proto

It has these top-level messages:
	AccountRequest
	AccountResponse
*/
package silk_core

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AccountRequest struct {
	Platform  string `protobuf:"bytes,1,opt,name=platform" json:"platform,omitempty"`
	AccountId string `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	SerialNo  string `protobuf:"bytes,3,opt,name=serial_no,json=serialNo" json:"serial_no,omitempty"`
	NickName  string `protobuf:"bytes,4,opt,name=nick_name,json=nickName" json:"nick_name,omitempty"`
	HeadImage string `protobuf:"bytes,5,opt,name=head_image,json=headImage" json:"head_image,omitempty"`
	QrCode    string `protobuf:"bytes,6,opt,name=qr_code,json=qrCode" json:"qr_code,omitempty"`
	Metadata  string `protobuf:"bytes,7,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *AccountRequest) Reset()                    { *m = AccountRequest{} }
func (m *AccountRequest) String() string            { return proto.CompactTextString(m) }
func (*AccountRequest) ProtoMessage()               {}
func (*AccountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AccountRequest) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *AccountRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *AccountRequest) GetSerialNo() string {
	if m != nil {
		return m.SerialNo
	}
	return ""
}

func (m *AccountRequest) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *AccountRequest) GetHeadImage() string {
	if m != nil {
		return m.HeadImage
	}
	return ""
}

func (m *AccountRequest) GetQrCode() string {
	if m != nil {
		return m.QrCode
	}
	return ""
}

func (m *AccountRequest) GetMetadata() string {
	if m != nil {
		return m.Metadata
	}
	return ""
}

type AccountResponse struct {
	Id uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *AccountResponse) Reset()                    { *m = AccountResponse{} }
func (m *AccountResponse) String() string            { return proto.CompactTextString(m) }
func (*AccountResponse) ProtoMessage()               {}
func (*AccountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AccountResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*AccountRequest)(nil), "silk.core.AccountRequest")
	proto.RegisterType((*AccountResponse)(nil), "silk.core.AccountResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Silker service

type SilkerClient interface {
	CreateAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountResponse, error)
}

type silkerClient struct {
	cc *grpc.ClientConn
}

func NewSilkerClient(cc *grpc.ClientConn) SilkerClient {
	return &silkerClient{cc}
}

func (c *silkerClient) CreateAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountResponse, error) {
	out := new(AccountResponse)
	err := grpc.Invoke(ctx, "/silk.core.Silker/CreateAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Silker service

type SilkerServer interface {
	CreateAccount(context.Context, *AccountRequest) (*AccountResponse, error)
}

func RegisterSilkerServer(s *grpc.Server, srv SilkerServer) {
	s.RegisterService(&_Silker_serviceDesc, srv)
}

func _Silker_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SilkerServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/silk.core.Silker/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SilkerServer).CreateAccount(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Silker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "silk.core.Silker",
	HandlerType: (*SilkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _Silker_CreateAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accounts.proto",
}

func init() { proto.RegisterFile("accounts.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 302 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x95, 0x50, 0x52, 0x62, 0x89, 0x82, 0x2c, 0x21, 0x4c, 0x0a, 0x12, 0x74, 0x42, 0x0c,
	0x89, 0x80, 0x8d, 0x0d, 0x75, 0xea, 0xd2, 0xa1, 0x3c, 0x40, 0x74, 0xc4, 0x47, 0xb1, 0x9a, 0xf8,
	0x52, 0xdb, 0xe5, 0x01, 0x78, 0x05, 0x1e, 0x8d, 0x89, 0x9d, 0x07, 0x41, 0x8e, 0x43, 0x24, 0x24,
	0x46, 0xff, 0xdf, 0xfd, 0xff, 0xf9, 0x7e, 0x36, 0x81, 0xaa, 0xa2, 0x9d, 0x76, 0x36, 0x6f, 0x0d,
	0x39, 0xe2, 0xa9, 0x55, 0xf5, 0x26, 0xaf, 0xc8, 0x60, 0x76, 0xbe, 0x26, 0x5a, 0xd7, 0x58, 0x40,
	0xab, 0x0a, 0xd0, 0x9a, 0x1c, 0x38, 0x45, 0xba, 0x1f, 0x9c, 0x7d, 0x45, 0x6c, 0xf2, 0x18, 0xbc,
	0x2b, 0xdc, 0xee, 0xd0, 0x3a, 0x9e, 0xb1, 0x83, 0xb6, 0x06, 0xf7, 0x42, 0xa6, 0x11, 0xd1, 0x65,
	0x74, 0x9d, 0xae, 0x86, 0x37, 0xbf, 0x60, 0xac, 0xdf, 0x54, 0x2a, 0x29, 0xe2, 0x8e, 0xa6, 0xbd,
	0xb2, 0x90, 0x7c, 0xca, 0x52, 0x8b, 0x46, 0x41, 0x5d, 0x6a, 0x12, 0x7b, 0xc1, 0x1b, 0x84, 0x25,
	0x79, 0xa8, 0x55, 0xb5, 0x29, 0x35, 0x34, 0x28, 0x46, 0x01, 0x7a, 0x61, 0x09, 0x0d, 0xfa, 0xe0,
	0x57, 0x04, 0x59, 0xaa, 0x06, 0xd6, 0x28, 0xf6, 0x43, 0xb0, 0x57, 0x16, 0x5e, 0xe0, 0xa7, 0x6c,
	0xbc, 0x35, 0x65, 0x45, 0x12, 0x45, 0xd2, 0xb1, 0x64, 0x6b, 0xe6, 0x24, 0xd1, 0x7f, 0xb6, 0x41,
	0x07, 0x12, 0x1c, 0x88, 0x71, 0xc8, 0xfc, 0x7d, 0xcf, 0xae, 0xd8, 0xd1, 0x70, 0x9a, 0x6d, 0x49,
	0x5b, 0xe4, 0x13, 0x16, 0x2b, 0xd9, 0x5d, 0x35, 0x5a, 0xc5, 0x4a, 0xde, 0x35, 0x2c, 0x79, 0x52,
	0xf5, 0x06, 0x0d, 0xaf, 0xd8, 0xe1, 0xdc, 0x20, 0x38, 0xec, 0x2d, 0xfc, 0x2c, 0x1f, 0x3a, 0xcc,
	0xff, 0x36, 0x94, 0x65, 0xff, 0xa1, 0xb0, 0x61, 0x36, 0x7d, 0xff, 0xfc, 0xfe, 0x88, 0x4f, 0xb2,
	0xe3, 0xe2, 0xed, 0xb6, 0xf0, 0x63, 0x45, 0x5f, 0xcf, 0x43, 0x74, 0xf3, 0x9c, 0x74, 0xa5, 0xdf,
	0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xbe, 0xd4, 0xd1, 0x29, 0xaf, 0x01, 0x00, 0x00,
}
